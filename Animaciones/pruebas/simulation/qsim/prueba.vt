// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2020 02:02:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    prueba
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module prueba_vlg_sample_tst(
	CLK,
	START,
	sampler_tx
);
input  CLK;
input  START;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or START)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module prueba_vlg_check_tst (
	c_out,
	f_out,
	GND_OUT,
	VCC_OUT,
	sampler_rx
);
input [31:0] c_out;
input [31:0] f_out;
input [7:0] GND_OUT;
input [63:0] VCC_OUT;
input sampler_rx;

reg [31:0] c_out_expected;
reg [31:0] f_out_expected;
reg [7:0] GND_OUT_expected;
reg [63:0] VCC_OUT_expected;

reg [31:0] c_out_prev;
reg [31:0] f_out_prev;
reg [7:0] GND_OUT_prev;
reg [63:0] VCC_OUT_prev;

reg [31:0] c_out_expected_prev;
reg [31:0] f_out_expected_prev;
reg [7:0] GND_OUT_expected_prev;
reg [63:0] VCC_OUT_expected_prev;

reg [31:0] last_c_out_exp;
reg [31:0] last_f_out_exp;
reg [7:0] last_GND_OUT_exp;
reg [63:0] last_VCC_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	c_out_prev = c_out;
	f_out_prev = f_out;
	GND_OUT_prev = GND_OUT;
	VCC_OUT_prev = VCC_OUT;
end

// update expected /o prevs

always @(trigger)
begin
	c_out_expected_prev = c_out_expected;
	f_out_expected_prev = f_out_expected;
	GND_OUT_expected_prev = GND_OUT_expected;
	VCC_OUT_expected_prev = VCC_OUT_expected;
end


// expected c_out[ 31 ]
initial
begin
	c_out_expected[31] = 1'bX;
end 
// expected c_out[ 30 ]
initial
begin
	c_out_expected[30] = 1'bX;
end 
// expected c_out[ 29 ]
initial
begin
	c_out_expected[29] = 1'bX;
end 
// expected c_out[ 28 ]
initial
begin
	c_out_expected[28] = 1'bX;
end 
// expected c_out[ 27 ]
initial
begin
	c_out_expected[27] = 1'bX;
end 
// expected c_out[ 26 ]
initial
begin
	c_out_expected[26] = 1'bX;
end 
// expected c_out[ 25 ]
initial
begin
	c_out_expected[25] = 1'bX;
end 
// expected c_out[ 24 ]
initial
begin
	c_out_expected[24] = 1'bX;
end 
// expected c_out[ 23 ]
initial
begin
	c_out_expected[23] = 1'bX;
end 
// expected c_out[ 22 ]
initial
begin
	c_out_expected[22] = 1'bX;
end 
// expected c_out[ 21 ]
initial
begin
	c_out_expected[21] = 1'bX;
end 
// expected c_out[ 20 ]
initial
begin
	c_out_expected[20] = 1'bX;
end 
// expected c_out[ 19 ]
initial
begin
	c_out_expected[19] = 1'bX;
end 
// expected c_out[ 18 ]
initial
begin
	c_out_expected[18] = 1'bX;
end 
// expected c_out[ 17 ]
initial
begin
	c_out_expected[17] = 1'bX;
end 
// expected c_out[ 16 ]
initial
begin
	c_out_expected[16] = 1'bX;
end 
// expected c_out[ 15 ]
initial
begin
	c_out_expected[15] = 1'bX;
end 
// expected c_out[ 14 ]
initial
begin
	c_out_expected[14] = 1'bX;
end 
// expected c_out[ 13 ]
initial
begin
	c_out_expected[13] = 1'bX;
end 
// expected c_out[ 12 ]
initial
begin
	c_out_expected[12] = 1'bX;
end 
// expected c_out[ 11 ]
initial
begin
	c_out_expected[11] = 1'bX;
end 
// expected c_out[ 10 ]
initial
begin
	c_out_expected[10] = 1'bX;
end 
// expected c_out[ 9 ]
initial
begin
	c_out_expected[9] = 1'bX;
end 
// expected c_out[ 8 ]
initial
begin
	c_out_expected[8] = 1'bX;
end 
// expected c_out[ 7 ]
initial
begin
	c_out_expected[7] = 1'bX;
end 
// expected c_out[ 6 ]
initial
begin
	c_out_expected[6] = 1'bX;
end 
// expected c_out[ 5 ]
initial
begin
	c_out_expected[5] = 1'bX;
end 
// expected c_out[ 4 ]
initial
begin
	c_out_expected[4] = 1'bX;
end 
// expected c_out[ 3 ]
initial
begin
	c_out_expected[3] = 1'bX;
end 
// expected c_out[ 2 ]
initial
begin
	c_out_expected[2] = 1'bX;
end 
// expected c_out[ 1 ]
initial
begin
	c_out_expected[1] = 1'bX;
end 
// expected c_out[ 0 ]
initial
begin
	c_out_expected[0] = 1'bX;
end 
// expected f_out[ 31 ]
initial
begin
	f_out_expected[31] = 1'bX;
end 
// expected f_out[ 30 ]
initial
begin
	f_out_expected[30] = 1'bX;
end 
// expected f_out[ 29 ]
initial
begin
	f_out_expected[29] = 1'bX;
end 
// expected f_out[ 28 ]
initial
begin
	f_out_expected[28] = 1'bX;
end 
// expected f_out[ 27 ]
initial
begin
	f_out_expected[27] = 1'bX;
end 
// expected f_out[ 26 ]
initial
begin
	f_out_expected[26] = 1'bX;
end 
// expected f_out[ 25 ]
initial
begin
	f_out_expected[25] = 1'bX;
end 
// expected f_out[ 24 ]
initial
begin
	f_out_expected[24] = 1'bX;
end 
// expected f_out[ 23 ]
initial
begin
	f_out_expected[23] = 1'bX;
end 
// expected f_out[ 22 ]
initial
begin
	f_out_expected[22] = 1'bX;
end 
// expected f_out[ 21 ]
initial
begin
	f_out_expected[21] = 1'bX;
end 
// expected f_out[ 20 ]
initial
begin
	f_out_expected[20] = 1'bX;
end 
// expected f_out[ 19 ]
initial
begin
	f_out_expected[19] = 1'bX;
end 
// expected f_out[ 18 ]
initial
begin
	f_out_expected[18] = 1'bX;
end 
// expected f_out[ 17 ]
initial
begin
	f_out_expected[17] = 1'bX;
end 
// expected f_out[ 16 ]
initial
begin
	f_out_expected[16] = 1'bX;
end 
// expected f_out[ 15 ]
initial
begin
	f_out_expected[15] = 1'bX;
end 
// expected f_out[ 14 ]
initial
begin
	f_out_expected[14] = 1'bX;
end 
// expected f_out[ 13 ]
initial
begin
	f_out_expected[13] = 1'bX;
end 
// expected f_out[ 12 ]
initial
begin
	f_out_expected[12] = 1'bX;
end 
// expected f_out[ 11 ]
initial
begin
	f_out_expected[11] = 1'bX;
end 
// expected f_out[ 10 ]
initial
begin
	f_out_expected[10] = 1'bX;
end 
// expected f_out[ 9 ]
initial
begin
	f_out_expected[9] = 1'bX;
end 
// expected f_out[ 8 ]
initial
begin
	f_out_expected[8] = 1'bX;
end 
// expected f_out[ 7 ]
initial
begin
	f_out_expected[7] = 1'bX;
end 
// expected f_out[ 6 ]
initial
begin
	f_out_expected[6] = 1'bX;
end 
// expected f_out[ 5 ]
initial
begin
	f_out_expected[5] = 1'bX;
end 
// expected f_out[ 4 ]
initial
begin
	f_out_expected[4] = 1'bX;
end 
// expected f_out[ 3 ]
initial
begin
	f_out_expected[3] = 1'bX;
end 
// expected f_out[ 2 ]
initial
begin
	f_out_expected[2] = 1'bX;
end 
// expected f_out[ 1 ]
initial
begin
	f_out_expected[1] = 1'bX;
end 
// expected f_out[ 0 ]
initial
begin
	f_out_expected[0] = 1'bX;
end 
// expected GND_OUT[ 7 ]
initial
begin
	GND_OUT_expected[7] = 1'bX;
end 
// expected GND_OUT[ 6 ]
initial
begin
	GND_OUT_expected[6] = 1'bX;
end 
// expected GND_OUT[ 5 ]
initial
begin
	GND_OUT_expected[5] = 1'bX;
end 
// expected GND_OUT[ 4 ]
initial
begin
	GND_OUT_expected[4] = 1'bX;
end 
// expected GND_OUT[ 3 ]
initial
begin
	GND_OUT_expected[3] = 1'bX;
end 
// expected GND_OUT[ 2 ]
initial
begin
	GND_OUT_expected[2] = 1'bX;
end 
// expected GND_OUT[ 1 ]
initial
begin
	GND_OUT_expected[1] = 1'bX;
end 
// expected GND_OUT[ 0 ]
initial
begin
	GND_OUT_expected[0] = 1'bX;
end 
// expected VCC_OUT[ 63 ]
initial
begin
	VCC_OUT_expected[63] = 1'bX;
end 
// expected VCC_OUT[ 62 ]
initial
begin
	VCC_OUT_expected[62] = 1'bX;
end 
// expected VCC_OUT[ 61 ]
initial
begin
	VCC_OUT_expected[61] = 1'bX;
end 
// expected VCC_OUT[ 60 ]
initial
begin
	VCC_OUT_expected[60] = 1'bX;
end 
// expected VCC_OUT[ 59 ]
initial
begin
	VCC_OUT_expected[59] = 1'bX;
end 
// expected VCC_OUT[ 58 ]
initial
begin
	VCC_OUT_expected[58] = 1'bX;
end 
// expected VCC_OUT[ 57 ]
initial
begin
	VCC_OUT_expected[57] = 1'bX;
end 
// expected VCC_OUT[ 56 ]
initial
begin
	VCC_OUT_expected[56] = 1'bX;
end 
// expected VCC_OUT[ 55 ]
initial
begin
	VCC_OUT_expected[55] = 1'bX;
end 
// expected VCC_OUT[ 54 ]
initial
begin
	VCC_OUT_expected[54] = 1'bX;
end 
// expected VCC_OUT[ 53 ]
initial
begin
	VCC_OUT_expected[53] = 1'bX;
end 
// expected VCC_OUT[ 52 ]
initial
begin
	VCC_OUT_expected[52] = 1'bX;
end 
// expected VCC_OUT[ 51 ]
initial
begin
	VCC_OUT_expected[51] = 1'bX;
end 
// expected VCC_OUT[ 50 ]
initial
begin
	VCC_OUT_expected[50] = 1'bX;
end 
// expected VCC_OUT[ 49 ]
initial
begin
	VCC_OUT_expected[49] = 1'bX;
end 
// expected VCC_OUT[ 48 ]
initial
begin
	VCC_OUT_expected[48] = 1'bX;
end 
// expected VCC_OUT[ 47 ]
initial
begin
	VCC_OUT_expected[47] = 1'bX;
end 
// expected VCC_OUT[ 46 ]
initial
begin
	VCC_OUT_expected[46] = 1'bX;
end 
// expected VCC_OUT[ 45 ]
initial
begin
	VCC_OUT_expected[45] = 1'bX;
end 
// expected VCC_OUT[ 44 ]
initial
begin
	VCC_OUT_expected[44] = 1'bX;
end 
// expected VCC_OUT[ 43 ]
initial
begin
	VCC_OUT_expected[43] = 1'bX;
end 
// expected VCC_OUT[ 42 ]
initial
begin
	VCC_OUT_expected[42] = 1'bX;
end 
// expected VCC_OUT[ 41 ]
initial
begin
	VCC_OUT_expected[41] = 1'bX;
end 
// expected VCC_OUT[ 40 ]
initial
begin
	VCC_OUT_expected[40] = 1'bX;
end 
// expected VCC_OUT[ 39 ]
initial
begin
	VCC_OUT_expected[39] = 1'bX;
end 
// expected VCC_OUT[ 38 ]
initial
begin
	VCC_OUT_expected[38] = 1'bX;
end 
// expected VCC_OUT[ 37 ]
initial
begin
	VCC_OUT_expected[37] = 1'bX;
end 
// expected VCC_OUT[ 36 ]
initial
begin
	VCC_OUT_expected[36] = 1'bX;
end 
// expected VCC_OUT[ 35 ]
initial
begin
	VCC_OUT_expected[35] = 1'bX;
end 
// expected VCC_OUT[ 34 ]
initial
begin
	VCC_OUT_expected[34] = 1'bX;
end 
// expected VCC_OUT[ 33 ]
initial
begin
	VCC_OUT_expected[33] = 1'bX;
end 
// expected VCC_OUT[ 32 ]
initial
begin
	VCC_OUT_expected[32] = 1'bX;
end 
// expected VCC_OUT[ 31 ]
initial
begin
	VCC_OUT_expected[31] = 1'bX;
end 
// expected VCC_OUT[ 30 ]
initial
begin
	VCC_OUT_expected[30] = 1'bX;
end 
// expected VCC_OUT[ 29 ]
initial
begin
	VCC_OUT_expected[29] = 1'bX;
end 
// expected VCC_OUT[ 28 ]
initial
begin
	VCC_OUT_expected[28] = 1'bX;
end 
// expected VCC_OUT[ 27 ]
initial
begin
	VCC_OUT_expected[27] = 1'bX;
end 
// expected VCC_OUT[ 26 ]
initial
begin
	VCC_OUT_expected[26] = 1'bX;
end 
// expected VCC_OUT[ 25 ]
initial
begin
	VCC_OUT_expected[25] = 1'bX;
end 
// expected VCC_OUT[ 24 ]
initial
begin
	VCC_OUT_expected[24] = 1'bX;
end 
// expected VCC_OUT[ 23 ]
initial
begin
	VCC_OUT_expected[23] = 1'bX;
end 
// expected VCC_OUT[ 22 ]
initial
begin
	VCC_OUT_expected[22] = 1'bX;
end 
// expected VCC_OUT[ 21 ]
initial
begin
	VCC_OUT_expected[21] = 1'bX;
end 
// expected VCC_OUT[ 20 ]
initial
begin
	VCC_OUT_expected[20] = 1'bX;
end 
// expected VCC_OUT[ 19 ]
initial
begin
	VCC_OUT_expected[19] = 1'bX;
end 
// expected VCC_OUT[ 18 ]
initial
begin
	VCC_OUT_expected[18] = 1'bX;
end 
// expected VCC_OUT[ 17 ]
initial
begin
	VCC_OUT_expected[17] = 1'bX;
end 
// expected VCC_OUT[ 16 ]
initial
begin
	VCC_OUT_expected[16] = 1'bX;
end 
// expected VCC_OUT[ 15 ]
initial
begin
	VCC_OUT_expected[15] = 1'bX;
end 
// expected VCC_OUT[ 14 ]
initial
begin
	VCC_OUT_expected[14] = 1'bX;
end 
// expected VCC_OUT[ 13 ]
initial
begin
	VCC_OUT_expected[13] = 1'bX;
end 
// expected VCC_OUT[ 12 ]
initial
begin
	VCC_OUT_expected[12] = 1'bX;
end 
// expected VCC_OUT[ 11 ]
initial
begin
	VCC_OUT_expected[11] = 1'bX;
end 
// expected VCC_OUT[ 10 ]
initial
begin
	VCC_OUT_expected[10] = 1'bX;
end 
// expected VCC_OUT[ 9 ]
initial
begin
	VCC_OUT_expected[9] = 1'bX;
end 
// expected VCC_OUT[ 8 ]
initial
begin
	VCC_OUT_expected[8] = 1'bX;
end 
// expected VCC_OUT[ 7 ]
initial
begin
	VCC_OUT_expected[7] = 1'bX;
end 
// expected VCC_OUT[ 6 ]
initial
begin
	VCC_OUT_expected[6] = 1'bX;
end 
// expected VCC_OUT[ 5 ]
initial
begin
	VCC_OUT_expected[5] = 1'bX;
end 
// expected VCC_OUT[ 4 ]
initial
begin
	VCC_OUT_expected[4] = 1'bX;
end 
// expected VCC_OUT[ 3 ]
initial
begin
	VCC_OUT_expected[3] = 1'bX;
end 
// expected VCC_OUT[ 2 ]
initial
begin
	VCC_OUT_expected[2] = 1'bX;
end 
// expected VCC_OUT[ 1 ]
initial
begin
	VCC_OUT_expected[1] = 1'bX;
end 
// expected VCC_OUT[ 0 ]
initial
begin
	VCC_OUT_expected[0] = 1'bX;
end 
// generate trigger
always @(c_out_expected or c_out or f_out_expected or f_out or GND_OUT_expected or GND_OUT or VCC_OUT_expected or VCC_OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c_out = %b | expected f_out = %b | expected GND_OUT = %b | expected VCC_OUT = %b | ",c_out_expected_prev,f_out_expected_prev,GND_OUT_expected_prev,VCC_OUT_expected_prev);
	$display("| real c_out = %b | real f_out = %b | real GND_OUT = %b | real VCC_OUT = %b | ",c_out_prev,f_out_prev,GND_OUT_prev,VCC_OUT_prev);
`endif
	if (
		( c_out_expected_prev[0] !== 1'bx ) && ( c_out_prev[0] !== c_out_expected_prev[0] )
		&& ((c_out_expected_prev[0] !== last_c_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[0] = c_out_expected_prev[0];
	end
	if (
		( c_out_expected_prev[1] !== 1'bx ) && ( c_out_prev[1] !== c_out_expected_prev[1] )
		&& ((c_out_expected_prev[1] !== last_c_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[1] = c_out_expected_prev[1];
	end
	if (
		( c_out_expected_prev[2] !== 1'bx ) && ( c_out_prev[2] !== c_out_expected_prev[2] )
		&& ((c_out_expected_prev[2] !== last_c_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[2] = c_out_expected_prev[2];
	end
	if (
		( c_out_expected_prev[3] !== 1'bx ) && ( c_out_prev[3] !== c_out_expected_prev[3] )
		&& ((c_out_expected_prev[3] !== last_c_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[3] = c_out_expected_prev[3];
	end
	if (
		( c_out_expected_prev[4] !== 1'bx ) && ( c_out_prev[4] !== c_out_expected_prev[4] )
		&& ((c_out_expected_prev[4] !== last_c_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[4] = c_out_expected_prev[4];
	end
	if (
		( c_out_expected_prev[5] !== 1'bx ) && ( c_out_prev[5] !== c_out_expected_prev[5] )
		&& ((c_out_expected_prev[5] !== last_c_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[5] = c_out_expected_prev[5];
	end
	if (
		( c_out_expected_prev[6] !== 1'bx ) && ( c_out_prev[6] !== c_out_expected_prev[6] )
		&& ((c_out_expected_prev[6] !== last_c_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[6] = c_out_expected_prev[6];
	end
	if (
		( c_out_expected_prev[7] !== 1'bx ) && ( c_out_prev[7] !== c_out_expected_prev[7] )
		&& ((c_out_expected_prev[7] !== last_c_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[7] = c_out_expected_prev[7];
	end
	if (
		( c_out_expected_prev[8] !== 1'bx ) && ( c_out_prev[8] !== c_out_expected_prev[8] )
		&& ((c_out_expected_prev[8] !== last_c_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[8] = c_out_expected_prev[8];
	end
	if (
		( c_out_expected_prev[9] !== 1'bx ) && ( c_out_prev[9] !== c_out_expected_prev[9] )
		&& ((c_out_expected_prev[9] !== last_c_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[9] = c_out_expected_prev[9];
	end
	if (
		( c_out_expected_prev[10] !== 1'bx ) && ( c_out_prev[10] !== c_out_expected_prev[10] )
		&& ((c_out_expected_prev[10] !== last_c_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[10] = c_out_expected_prev[10];
	end
	if (
		( c_out_expected_prev[11] !== 1'bx ) && ( c_out_prev[11] !== c_out_expected_prev[11] )
		&& ((c_out_expected_prev[11] !== last_c_out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[11] = c_out_expected_prev[11];
	end
	if (
		( c_out_expected_prev[12] !== 1'bx ) && ( c_out_prev[12] !== c_out_expected_prev[12] )
		&& ((c_out_expected_prev[12] !== last_c_out_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[12] = c_out_expected_prev[12];
	end
	if (
		( c_out_expected_prev[13] !== 1'bx ) && ( c_out_prev[13] !== c_out_expected_prev[13] )
		&& ((c_out_expected_prev[13] !== last_c_out_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[13] = c_out_expected_prev[13];
	end
	if (
		( c_out_expected_prev[14] !== 1'bx ) && ( c_out_prev[14] !== c_out_expected_prev[14] )
		&& ((c_out_expected_prev[14] !== last_c_out_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[14] = c_out_expected_prev[14];
	end
	if (
		( c_out_expected_prev[15] !== 1'bx ) && ( c_out_prev[15] !== c_out_expected_prev[15] )
		&& ((c_out_expected_prev[15] !== last_c_out_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[15] = c_out_expected_prev[15];
	end
	if (
		( c_out_expected_prev[16] !== 1'bx ) && ( c_out_prev[16] !== c_out_expected_prev[16] )
		&& ((c_out_expected_prev[16] !== last_c_out_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[16] = c_out_expected_prev[16];
	end
	if (
		( c_out_expected_prev[17] !== 1'bx ) && ( c_out_prev[17] !== c_out_expected_prev[17] )
		&& ((c_out_expected_prev[17] !== last_c_out_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[17] = c_out_expected_prev[17];
	end
	if (
		( c_out_expected_prev[18] !== 1'bx ) && ( c_out_prev[18] !== c_out_expected_prev[18] )
		&& ((c_out_expected_prev[18] !== last_c_out_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[18] = c_out_expected_prev[18];
	end
	if (
		( c_out_expected_prev[19] !== 1'bx ) && ( c_out_prev[19] !== c_out_expected_prev[19] )
		&& ((c_out_expected_prev[19] !== last_c_out_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[19] = c_out_expected_prev[19];
	end
	if (
		( c_out_expected_prev[20] !== 1'bx ) && ( c_out_prev[20] !== c_out_expected_prev[20] )
		&& ((c_out_expected_prev[20] !== last_c_out_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[20] = c_out_expected_prev[20];
	end
	if (
		( c_out_expected_prev[21] !== 1'bx ) && ( c_out_prev[21] !== c_out_expected_prev[21] )
		&& ((c_out_expected_prev[21] !== last_c_out_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[21] = c_out_expected_prev[21];
	end
	if (
		( c_out_expected_prev[22] !== 1'bx ) && ( c_out_prev[22] !== c_out_expected_prev[22] )
		&& ((c_out_expected_prev[22] !== last_c_out_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[22] = c_out_expected_prev[22];
	end
	if (
		( c_out_expected_prev[23] !== 1'bx ) && ( c_out_prev[23] !== c_out_expected_prev[23] )
		&& ((c_out_expected_prev[23] !== last_c_out_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[23] = c_out_expected_prev[23];
	end
	if (
		( c_out_expected_prev[24] !== 1'bx ) && ( c_out_prev[24] !== c_out_expected_prev[24] )
		&& ((c_out_expected_prev[24] !== last_c_out_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[24] = c_out_expected_prev[24];
	end
	if (
		( c_out_expected_prev[25] !== 1'bx ) && ( c_out_prev[25] !== c_out_expected_prev[25] )
		&& ((c_out_expected_prev[25] !== last_c_out_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[25] = c_out_expected_prev[25];
	end
	if (
		( c_out_expected_prev[26] !== 1'bx ) && ( c_out_prev[26] !== c_out_expected_prev[26] )
		&& ((c_out_expected_prev[26] !== last_c_out_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[26] = c_out_expected_prev[26];
	end
	if (
		( c_out_expected_prev[27] !== 1'bx ) && ( c_out_prev[27] !== c_out_expected_prev[27] )
		&& ((c_out_expected_prev[27] !== last_c_out_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[27] = c_out_expected_prev[27];
	end
	if (
		( c_out_expected_prev[28] !== 1'bx ) && ( c_out_prev[28] !== c_out_expected_prev[28] )
		&& ((c_out_expected_prev[28] !== last_c_out_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[28] = c_out_expected_prev[28];
	end
	if (
		( c_out_expected_prev[29] !== 1'bx ) && ( c_out_prev[29] !== c_out_expected_prev[29] )
		&& ((c_out_expected_prev[29] !== last_c_out_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[29] = c_out_expected_prev[29];
	end
	if (
		( c_out_expected_prev[30] !== 1'bx ) && ( c_out_prev[30] !== c_out_expected_prev[30] )
		&& ((c_out_expected_prev[30] !== last_c_out_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[30] = c_out_expected_prev[30];
	end
	if (
		( c_out_expected_prev[31] !== 1'bx ) && ( c_out_prev[31] !== c_out_expected_prev[31] )
		&& ((c_out_expected_prev[31] !== last_c_out_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_out_exp[31] = c_out_expected_prev[31];
	end
	if (
		( f_out_expected_prev[0] !== 1'bx ) && ( f_out_prev[0] !== f_out_expected_prev[0] )
		&& ((f_out_expected_prev[0] !== last_f_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[0] = f_out_expected_prev[0];
	end
	if (
		( f_out_expected_prev[1] !== 1'bx ) && ( f_out_prev[1] !== f_out_expected_prev[1] )
		&& ((f_out_expected_prev[1] !== last_f_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[1] = f_out_expected_prev[1];
	end
	if (
		( f_out_expected_prev[2] !== 1'bx ) && ( f_out_prev[2] !== f_out_expected_prev[2] )
		&& ((f_out_expected_prev[2] !== last_f_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[2] = f_out_expected_prev[2];
	end
	if (
		( f_out_expected_prev[3] !== 1'bx ) && ( f_out_prev[3] !== f_out_expected_prev[3] )
		&& ((f_out_expected_prev[3] !== last_f_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[3] = f_out_expected_prev[3];
	end
	if (
		( f_out_expected_prev[4] !== 1'bx ) && ( f_out_prev[4] !== f_out_expected_prev[4] )
		&& ((f_out_expected_prev[4] !== last_f_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[4] = f_out_expected_prev[4];
	end
	if (
		( f_out_expected_prev[5] !== 1'bx ) && ( f_out_prev[5] !== f_out_expected_prev[5] )
		&& ((f_out_expected_prev[5] !== last_f_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[5] = f_out_expected_prev[5];
	end
	if (
		( f_out_expected_prev[6] !== 1'bx ) && ( f_out_prev[6] !== f_out_expected_prev[6] )
		&& ((f_out_expected_prev[6] !== last_f_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[6] = f_out_expected_prev[6];
	end
	if (
		( f_out_expected_prev[7] !== 1'bx ) && ( f_out_prev[7] !== f_out_expected_prev[7] )
		&& ((f_out_expected_prev[7] !== last_f_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[7] = f_out_expected_prev[7];
	end
	if (
		( f_out_expected_prev[8] !== 1'bx ) && ( f_out_prev[8] !== f_out_expected_prev[8] )
		&& ((f_out_expected_prev[8] !== last_f_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[8] = f_out_expected_prev[8];
	end
	if (
		( f_out_expected_prev[9] !== 1'bx ) && ( f_out_prev[9] !== f_out_expected_prev[9] )
		&& ((f_out_expected_prev[9] !== last_f_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[9] = f_out_expected_prev[9];
	end
	if (
		( f_out_expected_prev[10] !== 1'bx ) && ( f_out_prev[10] !== f_out_expected_prev[10] )
		&& ((f_out_expected_prev[10] !== last_f_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[10] = f_out_expected_prev[10];
	end
	if (
		( f_out_expected_prev[11] !== 1'bx ) && ( f_out_prev[11] !== f_out_expected_prev[11] )
		&& ((f_out_expected_prev[11] !== last_f_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[11] = f_out_expected_prev[11];
	end
	if (
		( f_out_expected_prev[12] !== 1'bx ) && ( f_out_prev[12] !== f_out_expected_prev[12] )
		&& ((f_out_expected_prev[12] !== last_f_out_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[12] = f_out_expected_prev[12];
	end
	if (
		( f_out_expected_prev[13] !== 1'bx ) && ( f_out_prev[13] !== f_out_expected_prev[13] )
		&& ((f_out_expected_prev[13] !== last_f_out_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[13] = f_out_expected_prev[13];
	end
	if (
		( f_out_expected_prev[14] !== 1'bx ) && ( f_out_prev[14] !== f_out_expected_prev[14] )
		&& ((f_out_expected_prev[14] !== last_f_out_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[14] = f_out_expected_prev[14];
	end
	if (
		( f_out_expected_prev[15] !== 1'bx ) && ( f_out_prev[15] !== f_out_expected_prev[15] )
		&& ((f_out_expected_prev[15] !== last_f_out_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[15] = f_out_expected_prev[15];
	end
	if (
		( f_out_expected_prev[16] !== 1'bx ) && ( f_out_prev[16] !== f_out_expected_prev[16] )
		&& ((f_out_expected_prev[16] !== last_f_out_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[16] = f_out_expected_prev[16];
	end
	if (
		( f_out_expected_prev[17] !== 1'bx ) && ( f_out_prev[17] !== f_out_expected_prev[17] )
		&& ((f_out_expected_prev[17] !== last_f_out_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[17] = f_out_expected_prev[17];
	end
	if (
		( f_out_expected_prev[18] !== 1'bx ) && ( f_out_prev[18] !== f_out_expected_prev[18] )
		&& ((f_out_expected_prev[18] !== last_f_out_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[18] = f_out_expected_prev[18];
	end
	if (
		( f_out_expected_prev[19] !== 1'bx ) && ( f_out_prev[19] !== f_out_expected_prev[19] )
		&& ((f_out_expected_prev[19] !== last_f_out_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[19] = f_out_expected_prev[19];
	end
	if (
		( f_out_expected_prev[20] !== 1'bx ) && ( f_out_prev[20] !== f_out_expected_prev[20] )
		&& ((f_out_expected_prev[20] !== last_f_out_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[20] = f_out_expected_prev[20];
	end
	if (
		( f_out_expected_prev[21] !== 1'bx ) && ( f_out_prev[21] !== f_out_expected_prev[21] )
		&& ((f_out_expected_prev[21] !== last_f_out_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[21] = f_out_expected_prev[21];
	end
	if (
		( f_out_expected_prev[22] !== 1'bx ) && ( f_out_prev[22] !== f_out_expected_prev[22] )
		&& ((f_out_expected_prev[22] !== last_f_out_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[22] = f_out_expected_prev[22];
	end
	if (
		( f_out_expected_prev[23] !== 1'bx ) && ( f_out_prev[23] !== f_out_expected_prev[23] )
		&& ((f_out_expected_prev[23] !== last_f_out_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[23] = f_out_expected_prev[23];
	end
	if (
		( f_out_expected_prev[24] !== 1'bx ) && ( f_out_prev[24] !== f_out_expected_prev[24] )
		&& ((f_out_expected_prev[24] !== last_f_out_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[24] = f_out_expected_prev[24];
	end
	if (
		( f_out_expected_prev[25] !== 1'bx ) && ( f_out_prev[25] !== f_out_expected_prev[25] )
		&& ((f_out_expected_prev[25] !== last_f_out_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[25] = f_out_expected_prev[25];
	end
	if (
		( f_out_expected_prev[26] !== 1'bx ) && ( f_out_prev[26] !== f_out_expected_prev[26] )
		&& ((f_out_expected_prev[26] !== last_f_out_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[26] = f_out_expected_prev[26];
	end
	if (
		( f_out_expected_prev[27] !== 1'bx ) && ( f_out_prev[27] !== f_out_expected_prev[27] )
		&& ((f_out_expected_prev[27] !== last_f_out_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[27] = f_out_expected_prev[27];
	end
	if (
		( f_out_expected_prev[28] !== 1'bx ) && ( f_out_prev[28] !== f_out_expected_prev[28] )
		&& ((f_out_expected_prev[28] !== last_f_out_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[28] = f_out_expected_prev[28];
	end
	if (
		( f_out_expected_prev[29] !== 1'bx ) && ( f_out_prev[29] !== f_out_expected_prev[29] )
		&& ((f_out_expected_prev[29] !== last_f_out_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[29] = f_out_expected_prev[29];
	end
	if (
		( f_out_expected_prev[30] !== 1'bx ) && ( f_out_prev[30] !== f_out_expected_prev[30] )
		&& ((f_out_expected_prev[30] !== last_f_out_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[30] = f_out_expected_prev[30];
	end
	if (
		( f_out_expected_prev[31] !== 1'bx ) && ( f_out_prev[31] !== f_out_expected_prev[31] )
		&& ((f_out_expected_prev[31] !== last_f_out_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_out_expected_prev);
		$display ("     Real value = %b", f_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_out_exp[31] = f_out_expected_prev[31];
	end
	if (
		( GND_OUT_expected_prev[0] !== 1'bx ) && ( GND_OUT_prev[0] !== GND_OUT_expected_prev[0] )
		&& ((GND_OUT_expected_prev[0] !== last_GND_OUT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GND_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GND_OUT_expected_prev);
		$display ("     Real value = %b", GND_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_GND_OUT_exp[0] = GND_OUT_expected_prev[0];
	end
	if (
		( GND_OUT_expected_prev[1] !== 1'bx ) && ( GND_OUT_prev[1] !== GND_OUT_expected_prev[1] )
		&& ((GND_OUT_expected_prev[1] !== last_GND_OUT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GND_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GND_OUT_expected_prev);
		$display ("     Real value = %b", GND_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_GND_OUT_exp[1] = GND_OUT_expected_prev[1];
	end
	if (
		( GND_OUT_expected_prev[2] !== 1'bx ) && ( GND_OUT_prev[2] !== GND_OUT_expected_prev[2] )
		&& ((GND_OUT_expected_prev[2] !== last_GND_OUT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GND_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GND_OUT_expected_prev);
		$display ("     Real value = %b", GND_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_GND_OUT_exp[2] = GND_OUT_expected_prev[2];
	end
	if (
		( GND_OUT_expected_prev[3] !== 1'bx ) && ( GND_OUT_prev[3] !== GND_OUT_expected_prev[3] )
		&& ((GND_OUT_expected_prev[3] !== last_GND_OUT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GND_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GND_OUT_expected_prev);
		$display ("     Real value = %b", GND_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_GND_OUT_exp[3] = GND_OUT_expected_prev[3];
	end
	if (
		( GND_OUT_expected_prev[4] !== 1'bx ) && ( GND_OUT_prev[4] !== GND_OUT_expected_prev[4] )
		&& ((GND_OUT_expected_prev[4] !== last_GND_OUT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GND_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GND_OUT_expected_prev);
		$display ("     Real value = %b", GND_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_GND_OUT_exp[4] = GND_OUT_expected_prev[4];
	end
	if (
		( GND_OUT_expected_prev[5] !== 1'bx ) && ( GND_OUT_prev[5] !== GND_OUT_expected_prev[5] )
		&& ((GND_OUT_expected_prev[5] !== last_GND_OUT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GND_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GND_OUT_expected_prev);
		$display ("     Real value = %b", GND_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_GND_OUT_exp[5] = GND_OUT_expected_prev[5];
	end
	if (
		( GND_OUT_expected_prev[6] !== 1'bx ) && ( GND_OUT_prev[6] !== GND_OUT_expected_prev[6] )
		&& ((GND_OUT_expected_prev[6] !== last_GND_OUT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GND_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GND_OUT_expected_prev);
		$display ("     Real value = %b", GND_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_GND_OUT_exp[6] = GND_OUT_expected_prev[6];
	end
	if (
		( GND_OUT_expected_prev[7] !== 1'bx ) && ( GND_OUT_prev[7] !== GND_OUT_expected_prev[7] )
		&& ((GND_OUT_expected_prev[7] !== last_GND_OUT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GND_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GND_OUT_expected_prev);
		$display ("     Real value = %b", GND_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_GND_OUT_exp[7] = GND_OUT_expected_prev[7];
	end
	if (
		( VCC_OUT_expected_prev[0] !== 1'bx ) && ( VCC_OUT_prev[0] !== VCC_OUT_expected_prev[0] )
		&& ((VCC_OUT_expected_prev[0] !== last_VCC_OUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[0] = VCC_OUT_expected_prev[0];
	end
	if (
		( VCC_OUT_expected_prev[1] !== 1'bx ) && ( VCC_OUT_prev[1] !== VCC_OUT_expected_prev[1] )
		&& ((VCC_OUT_expected_prev[1] !== last_VCC_OUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[1] = VCC_OUT_expected_prev[1];
	end
	if (
		( VCC_OUT_expected_prev[2] !== 1'bx ) && ( VCC_OUT_prev[2] !== VCC_OUT_expected_prev[2] )
		&& ((VCC_OUT_expected_prev[2] !== last_VCC_OUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[2] = VCC_OUT_expected_prev[2];
	end
	if (
		( VCC_OUT_expected_prev[3] !== 1'bx ) && ( VCC_OUT_prev[3] !== VCC_OUT_expected_prev[3] )
		&& ((VCC_OUT_expected_prev[3] !== last_VCC_OUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[3] = VCC_OUT_expected_prev[3];
	end
	if (
		( VCC_OUT_expected_prev[4] !== 1'bx ) && ( VCC_OUT_prev[4] !== VCC_OUT_expected_prev[4] )
		&& ((VCC_OUT_expected_prev[4] !== last_VCC_OUT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[4] = VCC_OUT_expected_prev[4];
	end
	if (
		( VCC_OUT_expected_prev[5] !== 1'bx ) && ( VCC_OUT_prev[5] !== VCC_OUT_expected_prev[5] )
		&& ((VCC_OUT_expected_prev[5] !== last_VCC_OUT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[5] = VCC_OUT_expected_prev[5];
	end
	if (
		( VCC_OUT_expected_prev[6] !== 1'bx ) && ( VCC_OUT_prev[6] !== VCC_OUT_expected_prev[6] )
		&& ((VCC_OUT_expected_prev[6] !== last_VCC_OUT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[6] = VCC_OUT_expected_prev[6];
	end
	if (
		( VCC_OUT_expected_prev[7] !== 1'bx ) && ( VCC_OUT_prev[7] !== VCC_OUT_expected_prev[7] )
		&& ((VCC_OUT_expected_prev[7] !== last_VCC_OUT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[7] = VCC_OUT_expected_prev[7];
	end
	if (
		( VCC_OUT_expected_prev[8] !== 1'bx ) && ( VCC_OUT_prev[8] !== VCC_OUT_expected_prev[8] )
		&& ((VCC_OUT_expected_prev[8] !== last_VCC_OUT_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[8] = VCC_OUT_expected_prev[8];
	end
	if (
		( VCC_OUT_expected_prev[9] !== 1'bx ) && ( VCC_OUT_prev[9] !== VCC_OUT_expected_prev[9] )
		&& ((VCC_OUT_expected_prev[9] !== last_VCC_OUT_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[9] = VCC_OUT_expected_prev[9];
	end
	if (
		( VCC_OUT_expected_prev[10] !== 1'bx ) && ( VCC_OUT_prev[10] !== VCC_OUT_expected_prev[10] )
		&& ((VCC_OUT_expected_prev[10] !== last_VCC_OUT_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[10] = VCC_OUT_expected_prev[10];
	end
	if (
		( VCC_OUT_expected_prev[11] !== 1'bx ) && ( VCC_OUT_prev[11] !== VCC_OUT_expected_prev[11] )
		&& ((VCC_OUT_expected_prev[11] !== last_VCC_OUT_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[11] = VCC_OUT_expected_prev[11];
	end
	if (
		( VCC_OUT_expected_prev[12] !== 1'bx ) && ( VCC_OUT_prev[12] !== VCC_OUT_expected_prev[12] )
		&& ((VCC_OUT_expected_prev[12] !== last_VCC_OUT_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[12] = VCC_OUT_expected_prev[12];
	end
	if (
		( VCC_OUT_expected_prev[13] !== 1'bx ) && ( VCC_OUT_prev[13] !== VCC_OUT_expected_prev[13] )
		&& ((VCC_OUT_expected_prev[13] !== last_VCC_OUT_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[13] = VCC_OUT_expected_prev[13];
	end
	if (
		( VCC_OUT_expected_prev[14] !== 1'bx ) && ( VCC_OUT_prev[14] !== VCC_OUT_expected_prev[14] )
		&& ((VCC_OUT_expected_prev[14] !== last_VCC_OUT_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[14] = VCC_OUT_expected_prev[14];
	end
	if (
		( VCC_OUT_expected_prev[15] !== 1'bx ) && ( VCC_OUT_prev[15] !== VCC_OUT_expected_prev[15] )
		&& ((VCC_OUT_expected_prev[15] !== last_VCC_OUT_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[15] = VCC_OUT_expected_prev[15];
	end
	if (
		( VCC_OUT_expected_prev[16] !== 1'bx ) && ( VCC_OUT_prev[16] !== VCC_OUT_expected_prev[16] )
		&& ((VCC_OUT_expected_prev[16] !== last_VCC_OUT_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[16] = VCC_OUT_expected_prev[16];
	end
	if (
		( VCC_OUT_expected_prev[17] !== 1'bx ) && ( VCC_OUT_prev[17] !== VCC_OUT_expected_prev[17] )
		&& ((VCC_OUT_expected_prev[17] !== last_VCC_OUT_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[17] = VCC_OUT_expected_prev[17];
	end
	if (
		( VCC_OUT_expected_prev[18] !== 1'bx ) && ( VCC_OUT_prev[18] !== VCC_OUT_expected_prev[18] )
		&& ((VCC_OUT_expected_prev[18] !== last_VCC_OUT_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[18] = VCC_OUT_expected_prev[18];
	end
	if (
		( VCC_OUT_expected_prev[19] !== 1'bx ) && ( VCC_OUT_prev[19] !== VCC_OUT_expected_prev[19] )
		&& ((VCC_OUT_expected_prev[19] !== last_VCC_OUT_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[19] = VCC_OUT_expected_prev[19];
	end
	if (
		( VCC_OUT_expected_prev[20] !== 1'bx ) && ( VCC_OUT_prev[20] !== VCC_OUT_expected_prev[20] )
		&& ((VCC_OUT_expected_prev[20] !== last_VCC_OUT_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[20] = VCC_OUT_expected_prev[20];
	end
	if (
		( VCC_OUT_expected_prev[21] !== 1'bx ) && ( VCC_OUT_prev[21] !== VCC_OUT_expected_prev[21] )
		&& ((VCC_OUT_expected_prev[21] !== last_VCC_OUT_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[21] = VCC_OUT_expected_prev[21];
	end
	if (
		( VCC_OUT_expected_prev[22] !== 1'bx ) && ( VCC_OUT_prev[22] !== VCC_OUT_expected_prev[22] )
		&& ((VCC_OUT_expected_prev[22] !== last_VCC_OUT_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[22] = VCC_OUT_expected_prev[22];
	end
	if (
		( VCC_OUT_expected_prev[23] !== 1'bx ) && ( VCC_OUT_prev[23] !== VCC_OUT_expected_prev[23] )
		&& ((VCC_OUT_expected_prev[23] !== last_VCC_OUT_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[23] = VCC_OUT_expected_prev[23];
	end
	if (
		( VCC_OUT_expected_prev[24] !== 1'bx ) && ( VCC_OUT_prev[24] !== VCC_OUT_expected_prev[24] )
		&& ((VCC_OUT_expected_prev[24] !== last_VCC_OUT_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[24] = VCC_OUT_expected_prev[24];
	end
	if (
		( VCC_OUT_expected_prev[25] !== 1'bx ) && ( VCC_OUT_prev[25] !== VCC_OUT_expected_prev[25] )
		&& ((VCC_OUT_expected_prev[25] !== last_VCC_OUT_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[25] = VCC_OUT_expected_prev[25];
	end
	if (
		( VCC_OUT_expected_prev[26] !== 1'bx ) && ( VCC_OUT_prev[26] !== VCC_OUT_expected_prev[26] )
		&& ((VCC_OUT_expected_prev[26] !== last_VCC_OUT_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[26] = VCC_OUT_expected_prev[26];
	end
	if (
		( VCC_OUT_expected_prev[27] !== 1'bx ) && ( VCC_OUT_prev[27] !== VCC_OUT_expected_prev[27] )
		&& ((VCC_OUT_expected_prev[27] !== last_VCC_OUT_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[27] = VCC_OUT_expected_prev[27];
	end
	if (
		( VCC_OUT_expected_prev[28] !== 1'bx ) && ( VCC_OUT_prev[28] !== VCC_OUT_expected_prev[28] )
		&& ((VCC_OUT_expected_prev[28] !== last_VCC_OUT_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[28] = VCC_OUT_expected_prev[28];
	end
	if (
		( VCC_OUT_expected_prev[29] !== 1'bx ) && ( VCC_OUT_prev[29] !== VCC_OUT_expected_prev[29] )
		&& ((VCC_OUT_expected_prev[29] !== last_VCC_OUT_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[29] = VCC_OUT_expected_prev[29];
	end
	if (
		( VCC_OUT_expected_prev[30] !== 1'bx ) && ( VCC_OUT_prev[30] !== VCC_OUT_expected_prev[30] )
		&& ((VCC_OUT_expected_prev[30] !== last_VCC_OUT_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[30] = VCC_OUT_expected_prev[30];
	end
	if (
		( VCC_OUT_expected_prev[31] !== 1'bx ) && ( VCC_OUT_prev[31] !== VCC_OUT_expected_prev[31] )
		&& ((VCC_OUT_expected_prev[31] !== last_VCC_OUT_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[31] = VCC_OUT_expected_prev[31];
	end
	if (
		( VCC_OUT_expected_prev[32] !== 1'bx ) && ( VCC_OUT_prev[32] !== VCC_OUT_expected_prev[32] )
		&& ((VCC_OUT_expected_prev[32] !== last_VCC_OUT_exp[32]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[32] = VCC_OUT_expected_prev[32];
	end
	if (
		( VCC_OUT_expected_prev[33] !== 1'bx ) && ( VCC_OUT_prev[33] !== VCC_OUT_expected_prev[33] )
		&& ((VCC_OUT_expected_prev[33] !== last_VCC_OUT_exp[33]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[33] = VCC_OUT_expected_prev[33];
	end
	if (
		( VCC_OUT_expected_prev[34] !== 1'bx ) && ( VCC_OUT_prev[34] !== VCC_OUT_expected_prev[34] )
		&& ((VCC_OUT_expected_prev[34] !== last_VCC_OUT_exp[34]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[34] = VCC_OUT_expected_prev[34];
	end
	if (
		( VCC_OUT_expected_prev[35] !== 1'bx ) && ( VCC_OUT_prev[35] !== VCC_OUT_expected_prev[35] )
		&& ((VCC_OUT_expected_prev[35] !== last_VCC_OUT_exp[35]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[35] = VCC_OUT_expected_prev[35];
	end
	if (
		( VCC_OUT_expected_prev[36] !== 1'bx ) && ( VCC_OUT_prev[36] !== VCC_OUT_expected_prev[36] )
		&& ((VCC_OUT_expected_prev[36] !== last_VCC_OUT_exp[36]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[36] = VCC_OUT_expected_prev[36];
	end
	if (
		( VCC_OUT_expected_prev[37] !== 1'bx ) && ( VCC_OUT_prev[37] !== VCC_OUT_expected_prev[37] )
		&& ((VCC_OUT_expected_prev[37] !== last_VCC_OUT_exp[37]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[37] = VCC_OUT_expected_prev[37];
	end
	if (
		( VCC_OUT_expected_prev[38] !== 1'bx ) && ( VCC_OUT_prev[38] !== VCC_OUT_expected_prev[38] )
		&& ((VCC_OUT_expected_prev[38] !== last_VCC_OUT_exp[38]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[38] = VCC_OUT_expected_prev[38];
	end
	if (
		( VCC_OUT_expected_prev[39] !== 1'bx ) && ( VCC_OUT_prev[39] !== VCC_OUT_expected_prev[39] )
		&& ((VCC_OUT_expected_prev[39] !== last_VCC_OUT_exp[39]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[39] = VCC_OUT_expected_prev[39];
	end
	if (
		( VCC_OUT_expected_prev[40] !== 1'bx ) && ( VCC_OUT_prev[40] !== VCC_OUT_expected_prev[40] )
		&& ((VCC_OUT_expected_prev[40] !== last_VCC_OUT_exp[40]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[40] = VCC_OUT_expected_prev[40];
	end
	if (
		( VCC_OUT_expected_prev[41] !== 1'bx ) && ( VCC_OUT_prev[41] !== VCC_OUT_expected_prev[41] )
		&& ((VCC_OUT_expected_prev[41] !== last_VCC_OUT_exp[41]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[41] = VCC_OUT_expected_prev[41];
	end
	if (
		( VCC_OUT_expected_prev[42] !== 1'bx ) && ( VCC_OUT_prev[42] !== VCC_OUT_expected_prev[42] )
		&& ((VCC_OUT_expected_prev[42] !== last_VCC_OUT_exp[42]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[42] = VCC_OUT_expected_prev[42];
	end
	if (
		( VCC_OUT_expected_prev[43] !== 1'bx ) && ( VCC_OUT_prev[43] !== VCC_OUT_expected_prev[43] )
		&& ((VCC_OUT_expected_prev[43] !== last_VCC_OUT_exp[43]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[43] = VCC_OUT_expected_prev[43];
	end
	if (
		( VCC_OUT_expected_prev[44] !== 1'bx ) && ( VCC_OUT_prev[44] !== VCC_OUT_expected_prev[44] )
		&& ((VCC_OUT_expected_prev[44] !== last_VCC_OUT_exp[44]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[44] = VCC_OUT_expected_prev[44];
	end
	if (
		( VCC_OUT_expected_prev[45] !== 1'bx ) && ( VCC_OUT_prev[45] !== VCC_OUT_expected_prev[45] )
		&& ((VCC_OUT_expected_prev[45] !== last_VCC_OUT_exp[45]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[45] = VCC_OUT_expected_prev[45];
	end
	if (
		( VCC_OUT_expected_prev[46] !== 1'bx ) && ( VCC_OUT_prev[46] !== VCC_OUT_expected_prev[46] )
		&& ((VCC_OUT_expected_prev[46] !== last_VCC_OUT_exp[46]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[46] = VCC_OUT_expected_prev[46];
	end
	if (
		( VCC_OUT_expected_prev[47] !== 1'bx ) && ( VCC_OUT_prev[47] !== VCC_OUT_expected_prev[47] )
		&& ((VCC_OUT_expected_prev[47] !== last_VCC_OUT_exp[47]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[47] = VCC_OUT_expected_prev[47];
	end
	if (
		( VCC_OUT_expected_prev[48] !== 1'bx ) && ( VCC_OUT_prev[48] !== VCC_OUT_expected_prev[48] )
		&& ((VCC_OUT_expected_prev[48] !== last_VCC_OUT_exp[48]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[48] = VCC_OUT_expected_prev[48];
	end
	if (
		( VCC_OUT_expected_prev[49] !== 1'bx ) && ( VCC_OUT_prev[49] !== VCC_OUT_expected_prev[49] )
		&& ((VCC_OUT_expected_prev[49] !== last_VCC_OUT_exp[49]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[49] = VCC_OUT_expected_prev[49];
	end
	if (
		( VCC_OUT_expected_prev[50] !== 1'bx ) && ( VCC_OUT_prev[50] !== VCC_OUT_expected_prev[50] )
		&& ((VCC_OUT_expected_prev[50] !== last_VCC_OUT_exp[50]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[50] = VCC_OUT_expected_prev[50];
	end
	if (
		( VCC_OUT_expected_prev[51] !== 1'bx ) && ( VCC_OUT_prev[51] !== VCC_OUT_expected_prev[51] )
		&& ((VCC_OUT_expected_prev[51] !== last_VCC_OUT_exp[51]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[51] = VCC_OUT_expected_prev[51];
	end
	if (
		( VCC_OUT_expected_prev[52] !== 1'bx ) && ( VCC_OUT_prev[52] !== VCC_OUT_expected_prev[52] )
		&& ((VCC_OUT_expected_prev[52] !== last_VCC_OUT_exp[52]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[52] = VCC_OUT_expected_prev[52];
	end
	if (
		( VCC_OUT_expected_prev[53] !== 1'bx ) && ( VCC_OUT_prev[53] !== VCC_OUT_expected_prev[53] )
		&& ((VCC_OUT_expected_prev[53] !== last_VCC_OUT_exp[53]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[53] = VCC_OUT_expected_prev[53];
	end
	if (
		( VCC_OUT_expected_prev[54] !== 1'bx ) && ( VCC_OUT_prev[54] !== VCC_OUT_expected_prev[54] )
		&& ((VCC_OUT_expected_prev[54] !== last_VCC_OUT_exp[54]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[54] = VCC_OUT_expected_prev[54];
	end
	if (
		( VCC_OUT_expected_prev[55] !== 1'bx ) && ( VCC_OUT_prev[55] !== VCC_OUT_expected_prev[55] )
		&& ((VCC_OUT_expected_prev[55] !== last_VCC_OUT_exp[55]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[55] = VCC_OUT_expected_prev[55];
	end
	if (
		( VCC_OUT_expected_prev[56] !== 1'bx ) && ( VCC_OUT_prev[56] !== VCC_OUT_expected_prev[56] )
		&& ((VCC_OUT_expected_prev[56] !== last_VCC_OUT_exp[56]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[56] = VCC_OUT_expected_prev[56];
	end
	if (
		( VCC_OUT_expected_prev[57] !== 1'bx ) && ( VCC_OUT_prev[57] !== VCC_OUT_expected_prev[57] )
		&& ((VCC_OUT_expected_prev[57] !== last_VCC_OUT_exp[57]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[57] = VCC_OUT_expected_prev[57];
	end
	if (
		( VCC_OUT_expected_prev[58] !== 1'bx ) && ( VCC_OUT_prev[58] !== VCC_OUT_expected_prev[58] )
		&& ((VCC_OUT_expected_prev[58] !== last_VCC_OUT_exp[58]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[58] = VCC_OUT_expected_prev[58];
	end
	if (
		( VCC_OUT_expected_prev[59] !== 1'bx ) && ( VCC_OUT_prev[59] !== VCC_OUT_expected_prev[59] )
		&& ((VCC_OUT_expected_prev[59] !== last_VCC_OUT_exp[59]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[59] = VCC_OUT_expected_prev[59];
	end
	if (
		( VCC_OUT_expected_prev[60] !== 1'bx ) && ( VCC_OUT_prev[60] !== VCC_OUT_expected_prev[60] )
		&& ((VCC_OUT_expected_prev[60] !== last_VCC_OUT_exp[60]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[60] = VCC_OUT_expected_prev[60];
	end
	if (
		( VCC_OUT_expected_prev[61] !== 1'bx ) && ( VCC_OUT_prev[61] !== VCC_OUT_expected_prev[61] )
		&& ((VCC_OUT_expected_prev[61] !== last_VCC_OUT_exp[61]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[61] = VCC_OUT_expected_prev[61];
	end
	if (
		( VCC_OUT_expected_prev[62] !== 1'bx ) && ( VCC_OUT_prev[62] !== VCC_OUT_expected_prev[62] )
		&& ((VCC_OUT_expected_prev[62] !== last_VCC_OUT_exp[62]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[62] = VCC_OUT_expected_prev[62];
	end
	if (
		( VCC_OUT_expected_prev[63] !== 1'bx ) && ( VCC_OUT_prev[63] !== VCC_OUT_expected_prev[63] )
		&& ((VCC_OUT_expected_prev[63] !== last_VCC_OUT_exp[63]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VCC_OUT[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VCC_OUT_expected_prev);
		$display ("     Real value = %b", VCC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VCC_OUT_exp[63] = VCC_OUT_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module prueba_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg START;
// wires                                               
wire [31:0] c_out;
wire [31:0] f_out;
wire [7:0] GND_OUT;
wire [63:0] VCC_OUT;

wire sampler;                             

// assign statements (if any)                          
prueba i1 (
// port map - connection between master ports and signals/registers   
	.c_out(c_out),
	.CLK(CLK),
	.f_out(f_out),
	.GND_OUT(GND_OUT),
	.START(START),
	.VCC_OUT(VCC_OUT)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// START
initial
begin
	START = 1'b1;
end 

prueba_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.START(START),
	.sampler_tx(sampler)
);

prueba_vlg_check_tst tb_out(
	.c_out(c_out),
	.f_out(f_out),
	.GND_OUT(GND_OUT),
	.VCC_OUT(VCC_OUT),
	.sampler_rx(sampler)
);
endmodule

